generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  image     String?  @db.Text
  role      Role     @default(USER)
  shop      Shop?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItem        CartItem[]
  order           Order[]
  review          Review[]
  shippingAddress ShippingAddress?
}

model Shop {
  id          String   @id @default(uuid())
  name        String
  logoUrl     String?  @db.Text
  description String?  @db.Text
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product Product[]
  order   Order[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique
  logo String @db.Text

  product Product[]
}

model Product {
  id             String   @id @default(uuid())
  name           String
  description    String   @db.Text
  price          Float
  discount       Float?   @default(0)
  inventoryCount Int
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productImage ProductImage[]
  cartItem     CartItem[]
  orderItem    OrderItem[]
  review       Review[]

  @@index([name])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String  @db.Text
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime @default(now())
}

model ShippingAddress {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  address   String
  city      String
  state     String
  country   String
  zip       String
  createdAt DateTime @default(now())
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  shop        Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  orderItem OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(uuid())
  content   String   @db.Text
  rating    Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Float
  expiryDate DateTime
  createdAt  DateTime @default(now())
}
