generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  VENDOR
  ADMIN
}

enum UserStatus {
  SUSPENDED
  ACTIVE
}

enum ShopStatus {
  RESTRICTED
  ACTIVE
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  image     String?    @db.Text
  role      Role       @default(USER)
  status    UserStatus @default(ACTIVE)
  shop      Shop?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  cartItem        CartItem[]
  order           Order[]
  review          Review[]
  shippingAddress ShippingAddress[]
  shopFollow      ShopFollow[]
}

model Shop {
  id          String     @id @default(uuid())
  name        String
  logoUrl     String?    @db.Text
  description String?    @db.Text
  follower    Int        @default(0)
  status      ShopStatus @default(ACTIVE)
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  product    Product[]
  order      Order[]
  shopFollow ShopFollow[]
}

model ShopFollow {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String
}

model Category {
  id   String @id @default(uuid())
  name String @unique
  logo String @db.Text

  product Product[]
}

model Product {
  id             String   @id @default(uuid())
  name           String
  description    String   @db.Text
  price          Float
  discount       Float?   @default(0)
  inventoryCount Int
  avgRating      Float    @default(0)
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String
  shop           Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productImage ProductImage[]
  cartItem     CartItem[]
  orderItem    OrderItem[]
  review       Review[]

  @@index([name])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String  @db.Text
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime @default(now())
}

model ShippingAddress {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String   @unique
  address   String
  phone     String
  city      String
  state     String
  country   String
  zip       String
  createdAt DateTime @default(now())
}

model Order {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  shop          Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String
  totalAmount   Float
  transactionId String
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  orderItem       OrderItem[]
  shippingAddress ShippingAddress?
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  price     Float
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  transactionId String
  method        String        @default("aamarPay")
  amount        Float
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
}

model Review {
  id           String         @id @default(uuid())
  content      String         @db.Text
  rating       Int            @default(0)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  createdAt    DateTime       @default(now())
  replayReview ReplayReview[]
}

model ReplayReview {
  id       String @id @default(uuid())
  content  String @db.Text
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
}

model Coupon {
  id         String    @id @default(uuid())
  code       String    @unique
  discount   Float
  expiryDate DateTime?
  createdAt  DateTime  @default(now())
}
